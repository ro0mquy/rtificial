#ifndef final_H
#define final_H
const char final_source[] =R"shader_source(#version 430\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(layout(location = 0) uniform vec2 res;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(layout(location = 0) in vec2 tc;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(#line 1\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(#line 4\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(// lens distort, vignette, noise\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(layout(binding = 14) uniform sampler2D color; // vec3\n)shader_source"
R"shader_source(layout(location = 0) out vec3 out_color;\n)shader_source"
R"shader_source(layout(location = 37) uniform float time;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(layout(location = 39) uniform float distort_k;\n)shader_source"
R"shader_source(layout(location = 40) uniform float distort_kcube;\n)shader_source"
R"shader_source(layout(location = 41) uniform float vignette_intensity;\n)shader_source"
R"shader_source(layout(location = 42) uniform float grain_freq;\n)shader_source"
R"shader_source(layout(location = 43) uniform float grain_intensity;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(vec2 lens_distort(float aspect, float k, float kcube, vec2 c) {\n)shader_source"
R"shader_source(	c = c * 2. - 1.;\n)shader_source"
R"shader_source(	float r2 = (aspect * aspect) * (c.x * c.x) + c.y * c.y;\n)shader_source"
R"shader_source(	float r_norm = aspect * aspect + 1.;\n)shader_source"
R"shader_source(	float zeuch = k + kcube * sqrt(2.);\n)shader_source"
R"shader_source(	float f = (1. + r2 * zeuch) / (1. + r_norm * zeuch);\n)shader_source"
R"shader_source(	return (f * c) * .5 + .5;\n)shader_source"
R"shader_source(}\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(// add some kind of vignette\n)shader_source"
R"shader_source(// 0 <= intensity <= 1\n)shader_source"
R"shader_source(// intensity = .7 is good default\n)shader_source"
R"shader_source(float vignette(float intensity, vec2 c) {\n)shader_source"
R"shader_source(	float one_minus_intesity = 1. - intensity;\n)shader_source"
R"shader_source(	c.y *= -1.;\n)shader_source"
R"shader_source(	return one_minus_intesity + intensity * 16. * c.x *c.y * (1. - c.x) * (-1. - c.y);\n)shader_source"
R"shader_source(}\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(float rand(vec2 co){\n)shader_source"
R"shader_source(	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n)shader_source"
R"shader_source(}\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(vec2 g(float v) {\n)shader_source"
R"shader_source(	v *= 2.0 * 3.1415926;\n)shader_source"
R"shader_source(	return vec2(cos(v), sin(v));\n)shader_source"
R"shader_source(}\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(vec2 fade(vec2 t) {\n)shader_source"
R"shader_source(	return t*t*t*(t*(t*6.0-15.0)+10.0);\n)shader_source"
R"shader_source(}\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(float classic_noise(vec2 co) {\n)shader_source"
R"shader_source(	vec2 c = fract(co);\n)shader_source"
R"shader_source(	vec2 C = floor(co);\n)shader_source"
R"shader_source(	vec2 e = vec2(0.0, 1.0);\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(	vec4 n = vec4(\n)shader_source"
R"shader_source(		dot(g(rand(C + e.xx)), c - e.xx),\n)shader_source"
R"shader_source(		dot(g(rand(C + e.xy)), c - e.xy),\n)shader_source"
R"shader_source(		dot(g(rand(C + e.yx)), c - e.yx),\n)shader_source"
R"shader_source(		dot(g(rand(C + e.yy)), c - e.yy)\n)shader_source"
R"shader_source(	);\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(	vec2 u = fade(c);\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(	return mix(\n)shader_source"
R"shader_source(		mix(n[0], n[2], u.x),\n)shader_source"
R"shader_source(		mix(n[1], n[3], u.x),\n)shader_source"
R"shader_source(		u.y);\n)shader_source"
R"shader_source(}\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(float fbm(vec2 c) {\n)shader_source"
R"shader_source(	return (classic_noise(c) + classic_noise(c * 2.) * .5 + classic_noise(c * 4.) * .25)/1.75;\n)shader_source"
R"shader_source(}\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(void main() {\n)shader_source"
R"shader_source(	vec3 col;\n)shader_source"
R"shader_source(	float k = distort_k;\n)shader_source"
R"shader_source(	float kcube = distort_kcube;\n)shader_source"
R"shader_source(	float aspect = res.x / res.y;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(	col.r = textureLod(color, lens_distort(aspect, k * 1.34, kcube, tc), 0.).r;\n)shader_source"
R"shader_source(	col.g = textureLod(color, lens_distort(aspect, k * 1.2, kcube, tc), 0.).g;\n)shader_source"
R"shader_source(	col.b = textureLod(color, lens_distort(aspect, k, kcube, tc), 0.).b;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(	col *= vignette(vignette_intensity, gl_FragCoord.xy / res);\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(	// TODO ordentlicher noise\n)shader_source"
R"shader_source(	float phi = radians(10.);\n)shader_source"
R"shader_source(	out_color = col + grain_intensity * vec3(// so schön weerboß\n)shader_source"
R"shader_source(			fbm(vec2(1. / grain_freq *  gl_FragCoord.xy +  31. * time)),\n)shader_source"
R"shader_source(			fbm(vec2(1. / grain_freq *  gl_FragCoord.xy +  33. * time)),\n)shader_source"
R"shader_source(			fbm(vec2(1. / grain_freq *  gl_FragCoord.xy +  32. * time))\n)shader_source"
R"shader_source(			);\n)shader_source"
R"shader_source(}\n)shader_source"
;
#endif
