#ifndef tonemap_H
#define tonemap_H
const char tonemap_source[] =R"shader_source(#version 430\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(layout(location = 0) uniform vec2 res;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(layout(location = 0) in vec2 tc;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(#line 1\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(layout(binding = 12) uniform sampler2D luminance; // float level(11)\n)shader_source"
R"shader_source(layout(location = 44) uniform float key;\n)shader_source"
R"shader_source(layout(location = 45) uniform vec3 lift; // color\n)shader_source"
R"shader_source(layout(location = 46) uniform vec3 gamma; // color\n)shader_source"
R"shader_source(layout(location = 47) uniform vec3 gain; // color\n)shader_source"
R"shader_source(layout(binding = 11) uniform sampler2D blended_color; // vec3\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(layout(location = 0) out vec3 out_color;\n)shader_source"
R"shader_source(float A = 0.15;\n)shader_source"
R"shader_source(float B = 0.50;\n)shader_source"
R"shader_source(float C = 0.10;\n)shader_source"
R"shader_source(float D = 0.20;\n)shader_source"
R"shader_source(float E = 0.02;\n)shader_source"
R"shader_source(float F = 0.30;\n)shader_source"
R"shader_source(float W = 11.2;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(vec3 tonemap(vec3 color) {\n)shader_source"
R"shader_source(   return ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;\n)shader_source"
R"shader_source(}\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(void main() {\n)shader_source"
R"shader_source(	vec3 color = textureLod(blended_color, tc, 0.).rgb;\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(	// tonemap\n)shader_source"
R"shader_source(	float avgLuminance = exp(textureLod(luminance, tc, 0.).r);\n)shader_source"
R"shader_source(	color *= key / avgLuminance;\n)shader_source"
R"shader_source(	color = tonemap(color)/tonemap(vec3(W));\n)shader_source"
R"shader_source(	color = clamp(color, 0., 1.);\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(	// color grade\n)shader_source"
R"shader_source(	color = gain * (color + lift * pow(1. - color, 1./gamma));\n)shader_source"
R"shader_source(\n)shader_source"
R"shader_source(	out_color = color;\n)shader_source"
R"shader_source(}\n)shader_source"
;
#endif
